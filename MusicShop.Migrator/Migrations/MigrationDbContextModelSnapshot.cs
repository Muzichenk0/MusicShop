// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicShop.Migrator;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MusicShop.Migrator.Migrations
{
    [DbContext(typeof(MigrationDbContext))]
    partial class MigrationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MusicShop.Domain.Models.MusicalInstrument.MusicalInstrument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreationCountry")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InstrumentModel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("InstrumentTypeId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OfferId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("InstrumentTypeId");

                    b.HasIndex("OfferId");

                    b.ToTable("MusicalInstrument");
                });

            modelBuilder.Entity("MusicShop.Domain.Models.MusicalInstrument.MusicalInstrumentType.InstrumentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("InstrumentTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("InstrumentTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("InstrumentType");
                });

            modelBuilder.Entity("MusicShop.Domain.Models.Offer.Offer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)");

                    b.Property<double>("Discount")
                        .HasColumnType("double precision");

                    b.Property<int>("OfferState")
                        .HasColumnType("integer");

                    b.Property<double>("RequirePrice")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("UserId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Offer");
                });

            modelBuilder.Entity("MusicShop.Domain.Models.Offer.OfferCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("OfferCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OfferId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OfferCategoryId");

                    b.HasIndex("OfferId");

                    b.ToTable("OfferCategory");
                });

            modelBuilder.Entity("MusicShop.Domain.Models.Review.SellerReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("SenderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(65)
                        .HasColumnType("character varying(65)");

                    b.Property<Guid?>("UserId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.HasIndex("UserId");

                    b.ToTable("SellerReview");
                });

            modelBuilder.Entity("MusicShop.Domain.Models.User.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("RegistratedIn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MusicShop.Domain.Models.MusicalInstrument.MusicalInstrument", b =>
                {
                    b.HasOne("MusicShop.Domain.Models.MusicalInstrument.MusicalInstrumentType.InstrumentType", "InstrumentType")
                        .WithMany("MusicalInstruments")
                        .HasForeignKey("InstrumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicShop.Domain.Models.Offer.Offer", null)
                        .WithMany("InstrumentsToOffer")
                        .HasForeignKey("OfferId");

                    b.Navigation("InstrumentType");
                });

            modelBuilder.Entity("MusicShop.Domain.Models.MusicalInstrument.MusicalInstrumentType.InstrumentType", b =>
                {
                    b.HasOne("MusicShop.Domain.Models.MusicalInstrument.MusicalInstrumentType.InstrumentType", null)
                        .WithMany("SubTypes")
                        .HasForeignKey("InstrumentTypeId");

                    b.HasOne("MusicShop.Domain.Models.User.User", null)
                        .WithMany("MusicalSpecialization")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MusicShop.Domain.Models.Offer.Offer", b =>
                {
                    b.HasOne("MusicShop.Domain.Models.User.User", "User")
                        .WithMany("Offers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MusicShop.Domain.Models.Offer.OfferCategory", b =>
                {
                    b.HasOne("MusicShop.Domain.Models.Offer.OfferCategory", null)
                        .WithMany("Categories")
                        .HasForeignKey("OfferCategoryId");

                    b.HasOne("MusicShop.Domain.Models.Offer.Offer", "Offer")
                        .WithMany("OfferCategories")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("MusicShop.Domain.Models.Review.SellerReview", b =>
                {
                    b.HasOne("MusicShop.Domain.Models.User.User", "Sender")
                        .WithMany("SendedReviews")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicShop.Domain.Models.User.User", "User")
                        .WithMany("GainedReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sender");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MusicShop.Domain.Models.MusicalInstrument.MusicalInstrumentType.InstrumentType", b =>
                {
                    b.Navigation("MusicalInstruments");

                    b.Navigation("SubTypes");
                });

            modelBuilder.Entity("MusicShop.Domain.Models.Offer.Offer", b =>
                {
                    b.Navigation("InstrumentsToOffer");

                    b.Navigation("OfferCategories");
                });

            modelBuilder.Entity("MusicShop.Domain.Models.Offer.OfferCategory", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("MusicShop.Domain.Models.User.User", b =>
                {
                    b.Navigation("GainedReviews");

                    b.Navigation("MusicalSpecialization");

                    b.Navigation("Offers");

                    b.Navigation("SendedReviews");
                });
#pragma warning restore 612, 618
        }
    }
}
