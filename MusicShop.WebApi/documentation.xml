<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MusicShop.WebApi</name>
    </assembly>
    <members>
        <member name="T:MusicShop.WebApi.Controllers.InstrumentType.InstrumentTypeController">
            <summary>
            Модель - контроллер, определяющая интерфейс, с поведением из конечных точек, для обработки входящих запросов, нацеленных на сущность - тип инструмента.
            </summary>
        </member>
        <member name="F:MusicShop.WebApi.Controllers.InstrumentType.InstrumentTypeController._instTypeService">
            <summary>
            Экземпляр для конкретной сущности из зависимости с абстрактным типом <see cref="T:MusicShop.AppData.Contexts.InstrumentType.Services.IInstrumentTypeService"></see>
            </summary>
        </member>
        <member name="F:MusicShop.WebApi.Controllers.InstrumentType.InstrumentTypeController._logger">
            <summary>
            Экземпляр для конкретной сущности из зависимости с абстрактным типом <see cref="T:Microsoft.Extensions.Logging.ILogger"></see>
            </summary>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.InstrumentType.InstrumentTypeController.#ctor(MusicShop.AppData.Contexts.InstrumentType.Services.IInstrumentTypeService,Microsoft.Extensions.Logging.ILogger{MusicShop.WebApi.Controllers.InstrumentType.InstrumentTypeController})">
            <summary>
            Конструктор сущности <see cref="T:MusicShop.WebApi.Controllers.InstrumentType.InstrumentTypeController"/>
            </summary>
            <param name="instTypeService">Сервис типа инструмента, взятый из зависимости</param>
            <param name="logger">Механизм логгирования</param>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.InstrumentType.InstrumentTypeController.CreateInstrumentTypeAsync(MusicShop.Contracts.InstrumentType.CreateInstrumentTypeRequest,System.Threading.CancellationToken)">
            <summary>
            Создание типа инструмента, асинхронно.
            </summary>
            <param name="instTypeToAdd">Тип инструмента для добавления</param>
            <param name="token">Жетон отмены асинхронной операции</param>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.InstrumentType.InstrumentTypeController.GetAllInstrumentTypesAsync(System.Threading.CancellationToken)">
            <summary>
            Получение всех типов инструментов, асинхронно.
            </summary>
            <param name="token">Жетон отмены асинхронной операции</param>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.InstrumentType.InstrumentTypeController.GetInstrumentTypeByIdAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Получение типа инструмента, чей ID, согласован с <paramref name="instTypeId"/>, асинхронно.
            </summary>
            <param name="instTypeId">Идентификатор типа инструмента</param>
            <param name="token">Жетон отмены асинхронной операции</param>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.InstrumentType.InstrumentTypeController.DeleteInstrumentTypeAsync(MusicShop.Contracts.InstrumentType.DeleteInstrumentTypeRequest,System.Threading.CancellationToken)">
            <summary>
            Удаление типа инструмента, асинхронно.
            </summary>
            <param name="instTypeToDelete">Тип инструмента для удаления</param>
            <param name="token">Жетон отмены асинхронной операции</param>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.InstrumentType.InstrumentTypeController.UpdateInstrumentTypeAsync(System.Guid,MusicShop.Contracts.InstrumentType.UpdateInstrumentTypeRequest,System.Threading.CancellationToken)">
            <summary>
            Обновление типа инструмента, асинхронно.
            </summary>
            <param name="instTypeId">Идентификатор типа инструмента</param>
            <param name="updateInfo">Тип инструмента для удаления</param>
            <param name="token">Жетон отмены асинхронной операции</param>
        </member>
        <member name="T:MusicShop.WebApi.Controllers.Offer.OfferController">
            <summary>
            Модель - контроллер, определяющая интерфейс, с поведением из конечных точек, для обработки входящих запросов, нацеленных на сущность - предложение.
            </summary>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.Offer.OfferController.#ctor(MusicShop.AppData.Contexts.Offer.Services.IOfferService,Microsoft.Extensions.Logging.ILogger{MusicShop.WebApi.Controllers.Offer.OfferController})">
            <summary>
            Конструктор для экземпляра сущности <see cref="T:MusicShop.WebApi.Controllers.Offer.OfferController"/>
            </summary>
            <param name="service">Экземпляр сервиса для модели предложения. Берется из зависимости</param>
            <param name="logger">Механизм логгирования информации.</param>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.Offer.OfferController.CreateOfferAsync(MusicShop.Contracts.Offer.CreateOfferRequest,System.Threading.CancellationToken)">
            <summary>
            Создание нового предложения, асинхронно.
            </summary>
            <param name="offerToAdd">Предложение для создания</param>
            <param name="token">Жетон для отмены асинхронной задачи</param>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.Offer.OfferController.GetAllOfferAsync(System.Threading.CancellationToken)">
            <summary>
            Получение всех предложений, асинхронно.
            </summary>
            <param name="token">Жетон для отмены асинхронной задачи</param>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.Offer.OfferController.GetOfferByIdAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Получение предложения с помощью идентификатора, асинхронно.
            </summary>
            <param name="offerId">Идентификатор предложения</param>
            <param name="token">Жетон для отмены асинхронной задачи</param>
            <returns></returns>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.Offer.OfferController.DeleteOfferAsync(MusicShop.Contracts.Offer.DeleteOfferRequest,System.Threading.CancellationToken)">
            <summary>
            Удаление существующего предложения, асинхронно.
            </summary>
            <param name="offerToDelete">Существующее предложение для удаления</param>
            <param name="token">Жетон для отмены асинхронной задачи</param>
            <returns></returns>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.Offer.OfferController.UpdateOfferAsync(System.Guid,MusicShop.Contracts.Offer.UpdateOfferRequest,System.Threading.CancellationToken)">
            <summary>
            Обновление информации у существующего предложения, асинхронно.
            </summary>
            <param name="offerId">Идентификатор предложения</param>
            <param name="updateInfo">Информация для изменения существующего предложения</param>
            <param name="token">Жетон для отмены асинхронной задачи</param>
            <returns></returns>
        </member>
        <member name="T:MusicShop.WebApi.Controllers.SellerReview.SellerReviewController">
            <summary>
            Модель - контроллер, определяющая интерфейс, с поведением из конечных точек, для обработки входящих запросов, нацеленных на сущность - отзыв о продавце.
            </summary>
        </member>
        <member name="F:MusicShop.WebApi.Controllers.SellerReview.SellerReviewController._sReviewService">
            <summary>
            Экземпляр для конкретной сущности из зависимости с абстрактным типом <see cref="T:MusicShop.AppData.Contexts.SellerReview.Services.ISellerReviewService"></see>
            </summary>
        </member>
        <member name="F:MusicShop.WebApi.Controllers.SellerReview.SellerReviewController._logger">
            <summary>
            Экземпляр для конкретной сущности из зависимости с абстрактным типом <see cref="T:Microsoft.Extensions.Logging.ILogger"></see>
            </summary>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.SellerReview.SellerReviewController.#ctor(Microsoft.Extensions.Logging.ILogger{MusicShop.WebApi.Controllers.SellerReview.SellerReviewController},MusicShop.AppData.Contexts.SellerReview.Services.ISellerReviewService)">
            <summary>
            Конструктор, определяющий логику инициализации
            </summary>
            <param name="logger">Логгер с категорией <see cref="T:MusicShop.WebApi.Controllers.SellerReview.SellerReviewController"/></param>
            <param name="sellerReviewService">Сервис из зависимости с абстрактным типом <see cref="T:MusicShop.AppData.Contexts.SellerReview.Services.ISellerReviewService"/></param>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.SellerReview.SellerReviewController.CreateSellerReviewAsync(MusicShop.Contracts.SellerReview.CreateSellerReviewRequest,System.Threading.CancellationToken)">
            <summary>
            Добавление нового отзыва о продавце, асинхронно.
            </summary>
            <param name="sReviewToAdd">Информация об отзыве о продавце, для добавления.</param>
            <param name="token">Жетон для отмены асинхронной задачи</param>
            <returns><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.SellerReview.SellerReviewController.GetAllSellerReviewsAsync(System.Threading.CancellationToken)">
            <summary>
            Получение всех отзывов о продавцах, асинхронно.
            </summary>
            <param name="token">Жетон для отмены асинхронной задачи</param>
            <returns><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.SellerReview.SellerReviewController.GetSellerReviewByIdAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Получение отзыва о продавце, чей ID согласован с <paramref name="sReviewId"/>, асинхронно.
            </summary>
            <param name="sReviewId">Идентификатор отзыва о продавце</param>
            <param name="token">Жетон для отмены асинхронной задачи</param>
            <returns><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.SellerReview.SellerReviewController.DeleteSellerReviewAsync(MusicShop.Contracts.SellerReview.DeleteSellerReviewRequest,System.Threading.CancellationToken)">
            <summary>
            Удаление отзыва о продавце, асинхронно.
            </summary>
            <param name="sReviewToDelete">Информация об отзыве о продавце, для удаления</param>
            <param name="token">Жетон для отмены асинхронной задачи</param>
            <returns><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.SellerReview.SellerReviewController.UpdateSellerReviewAsync(System.Guid,MusicShop.Contracts.SellerReview.UpdateSellerReviewRequest,System.Threading.CancellationToken)">
            <summary>
            Обновление информации об отзыве о продавце, асинхронно.
            </summary>
            <param name="sReviewId">Идентификатор отзыва о продавце</param>
            <param name="updateInfo">Новая информация об отзыве о продавце</param>
            <param name="token">Жетон для отмены асинхронной задачи</param>
            <returns><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:MusicShop.WebApi.Controllers.SiteFile.SiteFileController">
            <summary>
            Контроллер, хранящий конечные точки для обработки входящих запросов, связанных с доменной моделью - файл сайта/>
            </summary>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.SiteFile.SiteFileController.#ctor(MusicShop.AppData.Contexts.SiteFile.Service.ISiteFileService,Microsoft.Extensions.Logging.ILogger{MusicShop.WebApi.Controllers.SiteFile.SiteFileController})">
            <summary>
            Конструктор, определяющий логику инициализации экземпляра <see cref="T:MusicShop.WebApi.Controllers.SiteFile.SiteFileController"/>
            </summary>
            <param name="siteFileService">экземпляр сервис файла сайта, извлеченный из зависимости</param>
            <param name="logger">логгер, экземпляр извлеченный из зависимости</param>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.SiteFile.SiteFileController.CreateSiteFileAsync(Microsoft.AspNetCore.Http.IFormFile,System.Threading.CancellationToken)">
            <summary>
            Создание файла сайта, асинхронно
            </summary>
            <param name="file">Выбранный файл</param>
            <param name="token">Жетон отмены асинхронной задачи</param>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.SiteFile.SiteFileController.GetAllSiteFilesAsync(System.Threading.CancellationToken)">
            <summary>
            Получение всех файлов, асинхронно
            </summary>
            <param name="token">Жетон отмены асинхронной задачи</param>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.SiteFile.SiteFileController.GetSiteFileById(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Получение информации о существующем файле, чей ID согласован с <paramref name="fileId"/>, асинхронно
            </summary>
            <param name="fileId">Идентификатор необходимого файла</param>
            <param name="token">Жетон отмены асинхронной задачи</param>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.SiteFile.SiteFileController.DeleteSiteFileAsync(MusicShop.Contracts.File.DeleteSiteFileRequest,System.Threading.CancellationToken)">
            <summary>
            Удаление существующего файла сайта, асинхронно
            </summary>
            <param name="fileToDelete">Информация о файле для удаления</param>
            <param name="token">Жетон отмены асинхронной задачи</param>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.SiteFile.SiteFileController.UpdateSiteFileAsync(System.Guid,Microsoft.AspNetCore.Http.IFormFile,System.Threading.CancellationToken)">
            <summary>
            Обновление существующего файла, новым, асинхронно
            </summary>
            <param name="fileId">Идентификатор существующего файла</param>
            <param name="newFile">Новый файл</param>
            <param name="token">Жетон отмены асинхронной задачи</param>
        </member>
        <member name="T:MusicShop.WebApi.Controllers.User.UserController">
            <summary>
            Модель - контроллер, определяющая интерфейс, с поведением из конечных точек, для обработки входящих запросов, нацеленных на сущность - пользователь.
            </summary>
        </member>
        <member name="F:MusicShop.WebApi.Controllers.User.UserController._userService">
            <summary>
            Экземпляр конкретной сущности из зависимости <see cref="T:MusicShop.AppData.Contexts.User.Services.IUserService"/>
            </summary>
        </member>
        <member name="F:MusicShop.WebApi.Controllers.User.UserController._logger">
            <summary>
            Экземпляр конкретной сущности из зависимости <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.User.UserController.#ctor(Microsoft.Extensions.Logging.ILogger{MusicShop.WebApi.Controllers.User.UserController},MusicShop.AppData.Contexts.User.Services.IUserService)">
            <summary>
            Конструктор сущности <see cref="T:MusicShop.WebApi.Controllers.User.UserController"/>
            </summary>
            <param name="logger">Взятый из зависимости логгер</param>
            <param name="userService">Репозиторий, нацеленный на работу с сущностью - пользователь</param>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.User.UserController.CreateUserAsync(MusicShop.Contracts.User.CreateUserRequest,System.Threading.CancellationToken)">
            <summary>
            Создание пользователя, на основе дто модели - <paramref name="userToAdd"/>, асинхронно.
            </summary>
            <param name="userToAdd">Информация о пользователе для добавления в БД</param>
            <param name="token">Жетон для отмены асинхронной задачи</param>
            <returns><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.User.UserController.GetUsersAsync(System.Threading.CancellationToken)">
            <summary>
            Получение каждого пользователя, асинхронно.
            </summary>
            <param name="token">Жетон для отмены асинхронной задачи</param>
            <returns><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.User.UserController.GetUserByIdAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Получение пользователя, чей ID согласован с <paramref name="userId"/>, асинхронно.
            </summary>
            <param name="userId">Идентификатор пользователя</param>
            <param name="token">Жетон для отмены асинхронной задачи</param>
            <returns><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.User.UserController.DeleteUserAsync(MusicShop.Contracts.User.DeleteUserRequest,System.Threading.CancellationToken)">
            <summary>
            Удаление пользователя из базы данных, асинхронно.
            </summary>
            <param name="userToDelete">Информация о пользователе, для удаления того из БД</param>
            <param name="token">Жетон для отмены асинхронной задачи</param>
            <returns><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.User.UserController.UpdateUserAsync(System.Guid,MusicShop.Contracts.User.UpdateUserRequest,System.Threading.CancellationToken)">
            <summary>
            Обновление информации о пользователе, асинхронно.
            </summary>
            <param name="userId">Идентификатор пользователя.</param>
            <param name="updateInfo">Информация о пользователе, для обновления того в БД</param>
            <param name="token">Жетон для отмены асинхронной задачи</param>
            <returns><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.User.UserController.GetCurrentUser(System.Threading.CancellationToken)">
            <summary>
            Получение информации о текущем, активном пользователе в сессии клиента.
            </summary>
            <param name="token">Жетон для отмены асинхронной задачи</param>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.User.UserController.Login(System.String,System.Threading.CancellationToken)">
            <summary>
            Аутентификация пользователя.
            </summary>
            <param name="token">Жетон для отмены асинхронной задачи</param>
        </member>
        <member name="T:MusicShop.WebApi.Program">
            <summary>
            Конкретная ссылочная модель, определяющая интерфейс модели программы.
            </summary>
        </member>
        <member name="M:MusicShop.WebApi.Program.Main(System.String[])">
            <summary>
            Точка для входа в программное решение, асинхронно запускающаяся.
            </summary>
            <param name="args">Инструкции из CLI</param>
        </member>
        <member name="M:MusicShop.WebApi.Program.GetMapperConfiguration">
            <summary>
            Элемент поведения статического интерфейса для получения настроек механизма соотношения(маппинга).
            </summary>
            <returns>Экземпляр <see cref="T:AutoMapper.MapperConfiguration"/></returns>
        </member>
    </members>
</doc>
