<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MusicShop.WebApi</name>
    </assembly>
    <members>
        <member name="T:MusicShop.WebApi.Controllers.InstrumentType.InstrumentTypeController">
            <summary>
            Модель - контроллер, определяющая интерфейс, с поведением из конечных точек, для обработки входящих запросов, нацеленных на сущность - тип инструмента.
            </summary>
        </member>
        <member name="F:MusicShop.WebApi.Controllers.InstrumentType.InstrumentTypeController._instTypeService">
            <summary>
            Экземпляр для конкретной сущности из зависимости с абстрактным типом <see cref="T:MusicShop.AppData.Contexts.MusicalInstrument.InstrumentType.Services.IInstrumentTypeService"></see>
            </summary>
        </member>
        <member name="F:MusicShop.WebApi.Controllers.InstrumentType.InstrumentTypeController._logger">
            <summary>
            Экземпляр для конкретной сущности из зависимости с абстрактным типом <see cref="T:Microsoft.Extensions.Logging.ILogger"></see>
            </summary>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.InstrumentType.InstrumentTypeController.CreateInstrumentTypeAsync(MusicShop.Contracts.InstrumentType.CreateInstrumentTypeRequest,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="instTypeToAdd"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.InstrumentType.InstrumentTypeController.GetAllInstrumentTypesAsync(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.InstrumentType.InstrumentTypeController.GetInstrumentByIdAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="instTypeId"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.InstrumentType.InstrumentTypeController.DeleteInstrumentTypeAsync(MusicShop.Contracts.InstrumentType.DeleteInstrumentTypeRequest,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="instTypeToDelete"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.InstrumentType.InstrumentTypeController.UpdateInstrumentTypeAsync(System.Guid,MusicShop.Contracts.InstrumentType.UpdateInstrumentTypeRequest,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="instTypeId"></param>
            <param name="instTypeToUpdate"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:MusicShop.WebApi.Controllers.MusicalInstrument.MusicalInstrumentController">
            <summary>
            Модель - контроллер, определяющая интерфейс, с поведением из конечных точек, для обработки входящих запросов, нацеленных на сущность - музыкальный инструмент.
            </summary>
        </member>
        <member name="F:MusicShop.WebApi.Controllers.MusicalInstrument.MusicalInstrumentController._musInstrumentService">
            <summary>
            Экземпляр для конкретной сущности из зависимости с абстрактным типом <see cref="T:MusicShop.AppData.Contexts.MusicalInstrument.Services.IMusicalInstrumentService"></see>
            </summary>
        </member>
        <member name="F:MusicShop.WebApi.Controllers.MusicalInstrument.MusicalInstrumentController._logger">
            <summary>
            Экземпляр для конкретной сущности из зависимости с абстрактным типом <see cref="T:Microsoft.Extensions.Logging.ILogger"></see>
            </summary>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.MusicalInstrument.MusicalInstrumentController.CreateMusicInstrumentAsync(MusicShop.Contracts.MusicalInstrument.CreateMusicalInstrumentRequest,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="_musInstrumentToAdd"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:MusicShop.WebApi.Controllers.SellerReview.SellerReviewController">
            <summary>
            Модель - контроллер, определяющая интерфейс, с поведением из конечных точек, для обработки входящих запросов, нацеленных на сущность - отзыв о продавце.
            </summary>
        </member>
        <member name="F:MusicShop.WebApi.Controllers.SellerReview.SellerReviewController._sReviewService">
            <summary>
            Экземпляр для конкретной сущности из зависимости с абстрактным типом <see cref="T:MusicShop.AppData.Contexts.SellerReview.Services.ISellerReviewService"></see>
            </summary>
        </member>
        <member name="F:MusicShop.WebApi.Controllers.SellerReview.SellerReviewController._logger">
            <summary>
            Экземпляр для конкретной сущности из зависимости с абстрактным типом <see cref="T:Microsoft.Extensions.Logging.ILogger"></see>
            </summary>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.SellerReview.SellerReviewController.CreateSellerReviewAsync(MusicShop.Contracts.SellerReview.CreateSellerReviewRequest,System.Threading.CancellationToken)">
            <summary>
            Добавление нового отзыва о продавце, асинхронно.
            </summary>
            <param name="sReviewToAdd">Информация об отзыве о продавце, для добавления.</param>
            <param name="token">Жетон для отмены асинхронной задачи</param>
            <returns><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.SellerReview.SellerReviewController.GetAllSellerReviewsAsync(System.Threading.CancellationToken)">
            <summary>
            Получение всех отзывов о продавцах, асинхронно.
            </summary>
            <param name="token">Жетон для отмены асинхронной задачи</param>
            <returns><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.SellerReview.SellerReviewController.GetSellerReviewByIdAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Получение отзыва о продавце, чей ID согласован с <paramref name="sReviewId"/>, асинхронно.
            </summary>
            <param name="sReviewId">Идентификатор отзыва о продавце</param>
            <param name="token">Жетон для отмены асинхронной задачи</param>
            <returns><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.SellerReview.SellerReviewController.DeleteSellerReviewAsync(MusicShop.Contracts.SellerReview.DeleteSellerReviewRequest,System.Threading.CancellationToken)">
            <summary>
            Удаление отзыва о продавце, асинхронно.
            </summary>
            <param name="sReviewToDelete">Информация об отзыве о продавце, для удаления</param>
            <param name="token">Жетон для отмены асинхронной задачи</param>
            <returns><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.SellerReview.SellerReviewController.UpdateSellerReviewAsync(System.Guid,MusicShop.Contracts.SellerReview.UpdateSellerReviewRequest,System.Threading.CancellationToken)">
            <summary>
            Обновление информации об отзыве о продавце, асинхронно.
            </summary>
            <param name="sReviewId">Идентификатор отзыва о продавце</param>
            <param name="sReviewToUpdate">Новая информация об отзыве о продавце</param>
            <param name="token">Жетон для отмены асинхронной задачи</param>
            <returns><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:MusicShop.WebApi.Controllers.User.UserController">
            <summary>
            Модель - контроллер, определяющая интерфейс, с поведением из конечных точек, для обработки входящих запросов, нацеленных на сущность - пользователь.
            </summary>
        </member>
        <member name="F:MusicShop.WebApi.Controllers.User.UserController._userRepository">
            <summary>
            Экземпляр конкретной сущности из зависимости <see cref="T:MusicShop.AppData.Contexts.User.Repository.IUserRepository"/>
            </summary>
        </member>
        <member name="F:MusicShop.WebApi.Controllers.User.UserController._logger">
            <summary>
            Экземпляр конкретной сущности из зависимости <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.User.UserController.#ctor(Microsoft.Extensions.Logging.ILogger{MusicShop.WebApi.Controllers.User.UserController},MusicShop.AppData.Contexts.User.Repository.IUserRepository)">
            <summary>
            Конструктор сущности <see cref="T:MusicShop.WebApi.Controllers.User.UserController"/>
            </summary>
            <param name="logger">Взятый из зависимости логгер</param>
            <param name="userRepository">Репозиторий, нацеленный на работу с сущностью - пользователь</param>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.User.UserController.CreateUserAsync(MusicShop.Contracts.User.CreateUserRequest,System.Threading.CancellationToken)">
            <summary>
            Создание пользователя, на основе дто модели - <paramref name="userToAdd"/>, асинхронно.
            </summary>
            <param name="userToAdd">Информация о пользователе для добавления в БД</param>
            <param name="token">Жетон для отмены асинхронной задачи</param>
            <returns><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.User.UserController.GetUsersAsync(System.Threading.CancellationToken)">
            <summary>
            Получение каждого пользователя, асинхронно.
            </summary>
            <param name="token">Жетон для отмены асинхронной задачи</param>
            <returns><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.User.UserController.GetUserByIdAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Получение пользователя с помощью <paramref name="userId"/>, асинхронно.
            </summary>
            <param name="userId">Идентификатор пользователя</param>
            <param name="token">Жетон для отмены асинхронной задачи</param>
            <returns><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.User.UserController.DeleteUserAsync(MusicShop.Contracts.User.DeleteUserRequest,System.Threading.CancellationToken)">
            <summary>
            Удаление пользователя из базы данных, асинхронно.
            </summary>
            <param name="userToDelete">Информация о пользователе, для удаления того из БД</param>
            <param name="token">Жетон для отмены асинхронной задачи</param>
            <returns><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:MusicShop.WebApi.Controllers.User.UserController.UpdateUserAsync(System.Guid,MusicShop.Contracts.User.UpdateUserRequest,System.Threading.CancellationToken)">
            <summary>
            Обновление информации о пользователе, асинхронно.
            </summary>
            <param name="userId">Идентификатор пользователя.</param>
            <param name="userToDelete">Информация о пользователе, для обновления того в БД</param>
            <param name="token">Жетон для отмены асинхронной задачи</param>
            <returns><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:MusicShop.WebApi.Program">
            <summary>
            Конкретная ссылочная модель, определяющая интерфейс модели программы.
            </summary>
        </member>
        <member name="M:MusicShop.WebApi.Program.Main(System.String[])">
            <summary>
            Точка для входа в программное решение, асинхронно запускающаяся.
            </summary>
            <param name="args">Инструкции из CLI</param>
        </member>
        <member name="M:MusicShop.WebApi.Program.GetMapperConfiguration">
            <summary>
            Элемент поведения статического интерфейса для получения настроек механизма соотношения(маппинга).
            </summary>
            <returns>Экземпляр <see cref="T:AutoMapper.MapperConfiguration"/></returns>
        </member>
    </members>
</doc>
